<?php

namespace App\Filament\Resources\PfcResource\Pages;

use App\Models\Pfcmadre;
use Illuminate\Support\Str;
use App\Models\Anagrafiche\Cliente;
use Filament\Forms\Components\Card;
use Filament\Forms\Components\Select;
use Filament\Forms\Components\Toggle;
use App\Filament\Resources\PfcResource;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Components\Wizard\Step;
use Filament\Resources\Pages\CreateRecord;
use Filament\Forms\Components\MarkdownEditor;
use Filament\Forms\Components\BelongsToSelect;
use Filament\Forms\Components\HasManyRepeater;

class CreatePfc extends CreateRecord
{
    use CreateRecord\Concerns\HasWizard;

    protected static string $resource = PfcResource::class;

    protected function getSteps(): array
    {
        return [
            // Card::make()
            // ->schema([
                Step::make('PFC Madre')
                ->description('Seleziona il PFC Madre da utilizzare')
                ->schema([
                    BelongsToSelect::make('cliente_id')
                    ->relationship('cliente', 'codiceNome')
                    ->required()
                    ->searchable()
                    ->placeholder('Cliente')
                    ->options(Cliente::all()->pluck('codiceNome', 'id'))
                    ->reactive()
                    ->getSearchResultsUsing(
                        fn (string $query) =>
                        Cliente::where('codice', 'like', "%{$query}%")
                            ->orWhere('nome', 'like', "%{$query}%")
                            ->get()->pluck('codiceNome', 'id')
                    ),
                    Select::make('pfcmadre_id')
                    ->label('PFC Madre')
                    ->hidden(fn (\Closure $get) => $get('data.cliente_id', true) > 0 ? false : true)
                    ->getOptionLabelUsing(fn ($value): ?string => Pfcmadre::find($value)?->codice)
                    ->options(
                        fn (\Closure $get) =>
                        Pfcmadre::where('cliente_id', '=', $get('data.cliente_id', true))
                            ->get()->pluck('codice', 'id')
                    )
                    ->reactive()
                    ->required()
                    ->getSearchResultsUsing(
                        fn (string $query, \Closure $get) =>
                        Pfcmadre::where('cliente_id', '=', $get('data.cliente_id', true))
                            ->where(function ($internalQuery) use ($query) {
                                $valore = str::replace(' ','%',$query);
                                $internalQuery->where('codice', 'like', "%{$valore}%");
                            })
                            ->get()->pluck('codice', 'id')
                    )
                    ->searchable()
                    ->columnSpan([
                        'md' => 5,
                    ])
                ])
                ->afterValidated(function ($component) {
                    $repeater = $component
                        ->getContainer()
                        ->getParentComponent()
                        ->getChildComponentContainer()
                        ->getComponent(fn ($repeater) => $repeater instanceof HasManyRepeater);
                    $repeater->fillFromRelationship();
                }),
            Step::make('Dettagli consegne')
                ->description('Date di consegna e quantitÃ ')
                ->schema([
                    HasManyRepeater::make('articoli')
                    ->relationship('getPfcmadreArticoli',
                    function ($query, $get)
                    {
                        if ( $get('pfcmadre_id') > 0) {
                            // dump($query);
                            $query->where('pfcmadre_id', $get('pfcmadre_id'));
                            // dump($query);
                        } else {
                            // dump($get('pfcmadre_id'));
                        }
                    }
                    )
                    ->schema([
                        TextInput::make('articolo_id')->required(),
                    ]),
                ]),
            Step::make('Visibility')
                ->description('Control who can view it')
                ->schema([
                    Toggle::make('is_visible')
                        ->label('Visible to customers.')
                        ->default(true),
                ]),
            // ])
        ];
    }
}
